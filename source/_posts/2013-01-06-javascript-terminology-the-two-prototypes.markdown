---
layout: post
title: "Терминология JavaScript: два прототипа"
date: 2013-01-06 11:35
comments: true
categories: [javascript, russian, translation]
---

*Перевод статьи [Dr. Axel Rauschmayer](http://rauschma.de/)'а “[JavaScript terminology: the two prototypes](http://www.2ality.com/2013/01/two-prototypes.html)”.*

К сожалению, в JavaScript'е термин “прототип” (“prototype”) имеет несколько значений.


## Прототип 1: связь между объектами
С одной стороны, существуют прототипы объектов. Согласно спецификации ECMAScript, некоторые свойства объектов являются *внутренними*. Внутренние свойста напрямую недоступны из JavaScript'а, их имена обычно пишут в двойных квадратных скобках. Одно их таких свойств, [[Prototype]], используется для реализации прототипного наследования. Каждый объект содержит в [[Prototype]] ссылку на свой прототип и т.о. наследует все его свойства. В ECMAScript 5 можно получить ссылку на прототип объекта с помощью функции `Object.getPrototypeOf()`.

    > Object.getPrototypeOf({}) === Object.prototype
    true

И можно создать новый объект, явно указав его прототип, с помощью функции `Object.create()`:

    > var proto = { foo: 123 };
    > var obj = Object.create(proto);
    > obj.foo
    123

Подробнее про обе эти функции можно почитать по ссылке [[1]](#ref1). В ECMAScript 6 можно будет получить ссылку на прототип объекта, используя специальное свойство `__proto__` [[2]](#ref2).


## Прототип 2: свойство конструктора
С другой стороны, каждый конструктор имеет свойство prototype. Оно содержит ссылку на объект, который будет использован как прототип всех объектов, которые будут созданы этим конструктором.

    > function Foo() {}
    > var f = new Foo();
    > Object.getPrototypeOf(f) === Foo.prototype
    true


## Разрешаем конфликт именований
Обычно из контекста ясно, какой из прототипов имеется ввиду. Если всё-таки возникает неопределённость, то “prototype” нужно понимать как прототип объекта, потому что именно в этом смысле это слово используется в стандартной библиотеке в названии функции `getPrototypeOf`. Таким образом, мы должны найти другое название для объекта, на который ссылается свойство prototype конструктора. Можно было бы использовать термин “прототип конструктора” (“constructor prototype”), но это не избавит нас от неоднозначности, потому что у конструкторов тоже есть свой прототип:

    > function Foo() {}
    > Object.getPrototypeOf(Foo) === Function.prototype
    true

Лучшим вариантом выглядит “прототип экземпляра” (“instance prototype”).


## Ссылки
<a id="ref1"></a>[1] [JavaScript inheritance by example](http://www.2ality.com/2012/01/js-inheritance-by-example.html)  
<a id="ref2"></a>[2] [JavaScript: \_\_proto\_\_](http://www.2ality.com/2012/10/proto.html)

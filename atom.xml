<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[alexeykuzmin.com]]></title>
  <link href="http://alexeykuzmin.com/atom.xml" rel="self"/>
  <link href="http://alexeykuzmin.com/"/>
  <updated>2013-05-02T00:14:36+04:00</updated>
  <id>http://alexeykuzmin.com/</id>
  <author>
    <name><![CDATA[Alexey Kuzmin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[jsonpointer.js]]></title>
    <link href="http://alexeykuzmin.com/blog/2013/05/02/jsonpointer-dot-js/"/>
    <updated>2013-05-02T01:01:00+04:00</updated>
    <id>http://alexeykuzmin.com/blog/2013/05/02/jsonpointer-dot-js</id>
    <content type="html"><![CDATA[<p>Although JSON&#160;Pointer did not become very popular since
its <a href="http://tools.ietf.org/html/draft-pbryan-zyp-json-pointer-00">appearance in 2011</a>,
it&#8217;s still alive and even has evolved into <a href="http://tools.ietf.org/html/rfc6901">proposed standard</a>.</p>

<!-- more -->


<h2>What JSON Pointer is</h2>

<p>It&#8217;s hard to explain it better than specification does:</p>

<blockquote><p>JSON Pointer defines a string syntax for identifying a specific value
within a JavaScript Object Notation (JSON) document.</p></blockquote>

<p>It is similar to <a href="http://goessner.net/articles/JsonPath/">JSON&#160;Path</a>,
but unlike the latter JSON&#160;Pointer extracts only <em>existing&#160;values</em> from document
and does not do any filtering or merging.</p>

<p>There is copy of evaluation examples from spec. Given the JSON document</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;foo&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;bar&quot;</span><span class="p">,</span> <span class="s2">&quot;baz&quot;</span><span class="p">],</span>
</span><span class='line'>    <span class="nt">&quot;&quot;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;a/b&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;c%d&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;e^f&quot;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;g|h&quot;</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;i\\j&quot;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;k\&quot;l&quot;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot; &quot;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;m~n&quot;</span><span class="p">:</span> <span class="mi">8</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The following strings evaluate to the accompanying values:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="s2">&quot;&quot;</span>       -&gt;  whole document
</span><span class='line'><span class="s2">&quot;/foo&quot;</span>   -&gt;  <span class="o">[</span><span class="s2">&quot;bar&quot;</span>, <span class="s2">&quot;baz&quot;</span><span class="o">]</span>
</span><span class='line'><span class="s2">&quot;/foo/0&quot;</span> -&gt;  <span class="s2">&quot;bar&quot;</span>
</span><span class='line'><span class="s2">&quot;/&quot;</span>      -&gt;  0
</span><span class='line'><span class="s2">&quot;/a~1b&quot;</span>  -&gt;  1
</span><span class='line'><span class="s2">&quot;/c%d&quot;</span>   -&gt;  2
</span><span class='line'><span class="s2">&quot;/e^f&quot;</span>   -&gt;  3
</span><span class='line'><span class="s2">&quot;/g|h&quot;</span>   -&gt;  4
</span><span class='line'><span class="s2">&quot;/i\\j&quot;</span>  -&gt;  5
</span><span class='line'><span class="s2">&quot;/k\&quot;l&quot;</span>  -&gt;  6
</span><span class='line'><span class="s2">&quot;/ &quot;</span>     -&gt;  7
</span><span class='line'><span class="s2">&quot;/m~0n&quot;</span>  -&gt;  8
</span></code></pre></td></tr></table></div></figure>


<h2>Existing implementations</h2>

<p>There is a bunch of JSON&#160;Pointer implementations in&#160;different languages:
<a href="https://github.com/janl/erl-jsonpointer">Erlang</a>,
<a href="https://github.com/dustin/go-jsonpointer">Go</a>,
<a href="https://github.com/zigorou/perl-json-pointer">Perl</a>,
<a href="https://github.com/raphaelstolt/php-jsonpointer">PHP</a>,
<a href="https://github.com/stefankoegl/python-json-pointer">Python</a>,
and there are
<a href="https://github.com/janl/node-jsonpointer">two</a>
<a href="https://github.com/manuelstofer/json-pointer">implementations</a>
in JavaScript.</p>

<p>Both of JavaScript implementations work only in Node.js environment
and&#160;implement something bigger than specification defines.
They support methods not only for retrieving values
but also for modifying JSON documents and other stuff.</p>

<h2>jsonpointer.js</h2>

<p>Since there was no client-side implementation of JSON&#160;Pointer in JavaScript
I have created my own one – <a href="https://github.com/alexeykuzmin/jsonpointer.js">jsonpointer.js</a>.
It implements only retrieving of values defined by specification,
works and all modern browsers and can be used as standalone script or <a href="https://github.com/amdjs/amdjs-api/wiki/AMD">AMD</a> module.
Also it works in Node.js environment and <a href="https://npmjs.org/package/jsonpointer.js">is available</a> via <a href="https://npmjs.org">npm</a>.</p>

<p>Here are several examples of its usage:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/path/to/jsonpointer.js&quot;</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// XXX: Target must be a string!</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">targetJSON</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">foo</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">bar</span><span class="o">:</span> <span class="s1">&#39;foobar&#39;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">baz</span><span class="o">:</span> <span class="p">[</span><span class="kc">true</span><span class="p">,</span> <span class="kc">false</span><span class="p">]</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">jsonpointer</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">targetJSON</span><span class="p">,</span> <span class="s1">&#39;/foo&#39;</span><span class="p">);</span>  <span class="c1">// {bar: &#39;foobar&#39;}</span>
</span><span class='line'><span class="nx">jsonpointer</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">targetJSON</span><span class="p">,</span> <span class="s1">&#39;/baz/test&#39;</span><span class="p">);</span>  <span class="c1">// undefined</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Partial application.</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">evaluate</span> <span class="o">=</span> <span class="nx">jsonpointer</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">targetJSON</span><span class="p">);</span>
</span><span class='line'><span class="nx">evaluate</span><span class="p">(</span><span class="s1">&#39;/foo/bar&#39;</span><span class="p">);</span>  <span class="c1">// &#39;foobar&#39;</span>
</span><span class='line'><span class="nx">evaluate</span><span class="p">(</span><span class="s1">&#39;/baz&#39;</span><span class="p">);</span>  <span class="c1">// [true, false]</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Detailed description of API can be found in project <a href="https://github.com/alexeykuzmin/jsonpointer.js#readme">README</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Массивы в JavaScript'е]]></title>
    <link href="http://alexeykuzmin.com/blog/2013/02/05/arrays-in-javascript/"/>
    <updated>2013-02-05T23:28:00+04:00</updated>
    <id>http://alexeykuzmin.com/blog/2013/02/05/arrays-in-javascript</id>
    <content type="html"><![CDATA[<p><em>Перевод статьи <a href="http://rauschma.de/">Dr. Axel Rauschmayer</a>&#8216;а “<a href="http://www.2ality.com/2012/12/arrays.html">Arrays in JavaScript</a>”.</em></p>

<p>Статья посвящена особенностям реализации массивов в JavaScript. Как ни странно, они мало чем отличаются от обычных объектов.</p>

<!-- more -->


<h2>1. В двух словах</h2>

<p>Как вы должно быть знаете, объекты в JavaScript&#8217;е это хэши, состоящие из пар ключ-значение, где в качестве ключей используются строки. Массивы &#8211; те же объекты, лишь с парой особенностей:</p>

<ol>
<li><strong>Индексы массива</strong>: если ключ является строковым представлением неотрицательного целого числа меньше некоего фиксированного значения, то он трактуется как индекс массива.</li>
<li><code>"length"</code>: значение этого свойства &#8211; неотрицательное целое, являющееся длиной массива. Длина массива определяется как числовое значение самого большого индекса плюс один.</li>
</ol>


<p>То, что индексы массивов в JavaScript&#8217;е на самом деле являются строками, может вызвать недоумение, особенно если вы знакомы с другими языками.
Конечно, JavaScript-движки внутри себя оптимизируют работу с массивами и используют числа в качестве индексов. Но в спецификации индексы описаны как строки и работать с ними приходится как со строками:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">];</span>
</span><span class='line'><span class="nx">arr</span><span class="p">[</span><span class="s1">&#39;0&#39;</span><span class="p">]</span>  <span class="c1">// &#39;a&#39;</span>
</span><span class='line'><span class="nx">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>  <span class="c1">// &#39;a&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Так как <code>0</code> не является валидным идентификатором, использование точечной нотации (<code>arr.0</code>) вызывает синтаксическую ошибку, из-за чего приходится использовать квадратные скобки. Оператор квадратные скобки преобразует свой операнд в строку, поэтому <code>arr[0]</code> работает нормально, что и видно выше. Индекс элемента в массиве не может превышать 32 бита (примерно). Аналогично оператору квадратные скобки, оператор <code>in</code> также преобразует свой первый операнд в строку, поэтому можно использовать числа для того, чтобы проверить наличие в массиве элемента с данным индексом:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="mi">2</span> <span class="k">in</span> <span class="p">[</span> <span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span> <span class="p">]</span>  <span class="c1">// true</span>
</span><span class='line'><span class="mi">3</span> <span class="k">in</span> <span class="p">[</span> <span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span> <span class="p">]</span>  <span class="c1">// false</span>
</span></code></pre></td></tr></table></div></figure>


<p>Дальше будет более подробно описано то, как устроены массивы в JavaScript&#8217;е.</p>

<h2>2. Массивы с лакунами</h2>

<p>Как уже было сказано, массивы являются хэшами, в которых ключами являются числа (представленные в виде строк), а значениями – произвольные величины. Из этого следует, что массив может содержать лакуны &#8211; индексы меньше длины массива, для которых нет значений. Лакуны можно создать с помощью литерала массива, не указывая значения между запятыми (но не между последней запятой и закрывающей скобкой). Лакуны пропускаются методами итерации по массиву, такими как <code>forEach</code> или <code>map</code>. Массив с лакунами называется разреженным (sparse). Сравним разреженный и плотный (dense) массивы:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">sparse</span> <span class="o">=</span> <span class="p">[</span> <span class="p">,</span> <span class="p">,</span> <span class="s1">&#39;c&#39;</span> <span class="p">];</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">dense</span>  <span class="o">=</span> <span class="p">[</span> <span class="kc">undefined</span><span class="p">,</span> <span class="kc">undefined</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span> <span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="mi">0</span> <span class="k">in</span> <span class="nx">sparse</span>  <span class="c1">// false</span>
</span><span class='line'><span class="mi">0</span> <span class="k">in</span> <span class="nx">dense</span>  <span class="c1">// true</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">sparse</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sparse</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'><span class="c1">// undefined</span>
</span><span class='line'><span class="c1">// undefined</span>
</span><span class='line'><span class="c1">// c</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">dense</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">dense</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'><span class="c1">// undefined</span>
</span><span class='line'><span class="c1">// undefined</span>
</span><span class='line'><span class="c1">// c</span>
</span><span class='line'>
</span><span class='line'><span class="nx">sparse</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">});</span>
</span><span class='line'><span class="c1">// c</span>
</span><span class='line'><span class="nx">dense</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">});</span>
</span><span class='line'><span class="c1">// undefined</span>
</span><span class='line'><span class="c1">// undefined</span>
</span><span class='line'><span class="c1">// c</span>
</span><span class='line'>
</span><span class='line'><span class="nx">sparse</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">i</span> <span class="p">});</span>
</span><span class='line'><span class="c1">// [ , , 2 ]</span>
</span><span class='line'><span class="nx">dense</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">i</span> <span class="p">});</span>
</span><span class='line'><span class="c1">// [ 0, 1, 2 ]</span>
</span><span class='line'>
</span><span class='line'><span class="nx">sparse</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">true</span> <span class="p">})</span>
</span><span class='line'><span class="c1">// [ &#39;c&#39; ]</span>
</span><span class='line'><span class="nx">dense</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">true</span> <span class="p">})</span>
</span><span class='line'><span class="c1">// [ undefined, undefined, &#39;c&#39; ]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Подробнее про плотные и разреженные массивы можно прочитать в статье по ссылке <a href="#ref2">[2]</a>.</p>

<h2>3. Конструктор Array</h2>

<p>Конструктор Array можно вызвать тремя способами:</p>

<ol>
<li><code>new Array()</code>: создаёт новый пустой массив. Пустой литерал массива <code>[]</code> является более короткой записью этой же операции.</li>
<li><code>new Array(len)</code>: создаёт массив с <code>len</code> лакунами. В <a href="http://www.html5rocks.com/en/tutorials/speed/v8/">некоторых JavaScript-движках</a> эта операция ведёт к выделению памяти для массива, что улучшает производительность в случае небольших массивов (для больших это не так). Но в большинстве случаев производительность не важна и стоит избегать ненужного усложнения, связанного с выделением памяти. Если это возможно, лучше создать массив с помощью литерала массива, сразу указав все элементы.</li>
<li><code>new Array(elem1, elem2, ...)</code>: создаёт массив из элементов elem1, elem2 и так далее. Это самый неудачный вариант использования конструктора Array, потому что если передать ему только один аргумент и он окажется целым числом, то реализуется сценарий номер 2, описанный выше. Чтобы обойти эту проблему, используйте литерал массива <code>[ elem1, elem2, ...]</code>, который создаст массив без побочных эффектов.</li>
</ol>


<p>Если вызвать Array как функцию (без оператора <code>new</code>), эффект будет таким же, как если вызвать его как конструктор.
(К слову говоря, сейчас в JavaScript нет встроенной функции для надёжного создания массива из отдельных элементов, видимо из-за редкости ситуации, когда это нужно. В ECMAScript 6 появится метод <a href="http://www.2ality.com/2011/07/array-from.html">Array.of()</a>, который исправит положение.)</p>

<h2>4. Индексы массива</h2>

<p>Спецификация ECMAScript содержит чёткое определение того, какие имена ключей должны трактоваться как индексы массива. Строка <code>s</code> является индексом массива тогда и только когда:</p>

<ul>
<li><code>s</code>, интерпретированная как 32-битное целое без знака и преобразованное обратно в строку, совпадает с <code>s</code>.</li>
<li><code>s</code>, преобразованная к целому, меньше 2<sup>32</sup> − 1 (максимально возможная длина).</li>
</ul>


<p>Если сравнивать численно, индекс <code>s</code> должен находится в пределах <code>0 ≤ s &lt; 2^32 − 1</code>.
Функция <code>ToUint32()</code> &#8211; преобразование в 32-битное целое без знака &#8211; определена внутри спецификации. На JavaScript&#8217;е её можно реализовать так <a href="#ref1">[1]</a>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">ToUint32</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">x</span> <span class="o">&gt;&gt;&gt;</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Из условия (1) следует, что несмотря на то, что многие строки могут быть преобразованы в 32-битное целое без знака, только некоторые из них являются валидными индексами массива:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">ToUint32</span><span class="p">(</span><span class="s1">&#39;0&#39;</span><span class="p">)</span>  <span class="c1">// 0</span>
</span><span class='line'><span class="nx">ToUint32</span><span class="p">(</span><span class="s1">&#39;00&#39;</span><span class="p">)</span>  <span class="c1">// 0</span>
</span><span class='line'><span class="nx">ToUint32</span><span class="p">(</span><span class="s1">&#39;03&#39;</span><span class="p">)</span>  <span class="c1">// 3</span>
</span><span class='line'><span class="nx">ToUint32</span><span class="p">(</span><span class="s1">&#39;abc&#39;</span><span class="p">)</span>  <span class="c1">// 0</span>
</span><span class='line'><span class="nx">ToUint32</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">32</span><span class="p">)</span><span class="o">+</span><span class="mi">3</span><span class="p">)</span>  <span class="c1">// 3</span>
</span></code></pre></td></tr></table></div></figure>


<p>Только первая строка удовлетворяет условию (1) и является валидным индексом. Любые строки, не удовлетворяющие условиям выше, трактуются как обычные имена свойств:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">];</span>
</span><span class='line'><span class="nx">arr</span><span class="p">[</span><span class="s1">&#39;0&#39;</span><span class="p">]</span>  <span class="c1">// &#39;a&#39;</span>
</span><span class='line'><span class="nx">arr</span><span class="p">[</span><span class="s1">&#39;00&#39;</span><span class="p">]</span>  <span class="c1">// undefined</span>
</span></code></pre></td></tr></table></div></figure>


<h2>5. length</h2>

<p>Свойство <code>length</code> массива является неотрицательным целым <code>l</code> в интервале
<code>0 ≤ l ≤ 2^32 − 1</code> (32 бита).</p>

<h3>5.1 Отслеживание индексов</h3>

<p>Когда в массив добавляются новые элементы, <code>length</code> автоматически увеличивается:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span>  <span class="c1">// 0</span>
</span><span class='line'><span class="nx">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;a&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span>  <span class="c1">// 1</span>
</span></code></pre></td></tr></table></div></figure>


<h3>5.2 Уменьшение length</h3>

<p>Если длине массива присвоить значение <code>l'</code>, которое меньше текущего значения <code>l</code>, то из массива будут удалены элементы, индексы которых удовлетворяют условию <code>l' ≤ i &lt; l</code>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span> <span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span> <span class="p">];</span>
</span><span class='line'><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span>  <span class="c1">// 3</span>
</span><span class='line'><span class="mi">2</span> <span class="k">in</span> <span class="nx">arr</span>  <span class="c1">// true</span>
</span><span class='line'><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>  <span class="c1">// 2</span>
</span><span class='line'><span class="mi">2</span> <span class="k">in</span> <span class="nx">arr</span>  <span class="c1">// false</span>
</span></code></pre></td></tr></table></div></figure>


<h3>5.3 Увеличение length</h3>

<p>Если присвоить <code>length</code> значение больше текущего, то в массиве появятся лакуны:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">];</span>
</span><span class='line'><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'><span class="nx">arr</span>  <span class="c1">// [ &#39;a&#39;, , ,]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>5.4 Допустимые значения <code>length</code></h3>

<p>Свойству <code>length</code> можно присвоить произвольное значение, но преобразование этого значения в число к помощью функций <code>ToUint32()</code> и <code>Number()</code> обязаны давать одинаковый результат. Например:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">ToUint32</span><span class="p">(</span><span class="s1">&#39;0&#39;</span><span class="p">)</span>  <span class="c1">// 0 (*)</span>
</span><span class='line'><span class="nx">ToUint32</span><span class="p">(</span><span class="s1">&#39;000&#39;</span><span class="p">)</span>  <span class="c1">// 0 (*)</span>
</span><span class='line'><span class="nx">ToUint32</span><span class="p">(</span><span class="s1">&#39;-1&#39;</span><span class="p">)</span>  <span class="c1">// 4294967295</span>
</span><span class='line'><span class="nx">ToUint32</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">32</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>  <span class="c1">// 4294967295 (*)</span>
</span><span class='line'><span class="nx">ToUint32</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">32</span><span class="p">))</span>  <span class="c1">// 0</span>
</span><span class='line'><span class="nx">ToUint32</span><span class="p">(</span><span class="s1">&#39;abc&#39;</span><span class="p">)</span>  <span class="c1">// 0</span>
</span></code></pre></td></tr></table></div></figure>


<p>Все значения, помеченные звёздочкой, являются допустимыми, остальные &#8211; нет:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">Number</span><span class="p">(</span><span class="s1">&#39;0&#39;</span><span class="p">)</span>  <span class="c1">// 0</span>
</span><span class='line'><span class="nb">Number</span><span class="p">(</span><span class="s1">&#39;000&#39;</span><span class="p">)</span>  <span class="c1">// 0</span>
</span><span class='line'><span class="nb">Number</span><span class="p">(</span><span class="s1">&#39;-1&#39;</span><span class="p">)</span>  <span class="c1">// -1</span>
</span><span class='line'><span class="nb">Number</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">32</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>  <span class="c1">// 4294967295</span>
</span><span class='line'><span class="nb">Number</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">32</span><span class="p">))</span>  <span class="c1">// 4294967296</span>
</span><span class='line'><span class="nb">Number</span><span class="p">(</span><span class="s1">&#39;abc&#39;</span><span class="p">)</span>  <span class="c1">// NaN</span>
</span></code></pre></td></tr></table></div></figure>


<p>Это можно легко проверить:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">[].</span><span class="nx">length</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>  <span class="c1">// RangeError: Invalid array length</span>
</span><span class='line'><span class="p">[].</span><span class="nx">length</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">32</span><span class="p">)</span>  <span class="c1">// RangeError: Invalid array length</span>
</span><span class='line'><span class="p">[].</span><span class="nx">length</span> <span class="o">=</span> <span class="s1">&#39;abc&#39;</span>  <span class="c1">// RangeError: Invalid array length</span>
</span></code></pre></td></tr></table></div></figure>


<h2>6. Экземпляры &#8220;класса&#8221; Array</h2>

<p>Экземпляры &#8220;класса&#8221; Array являются обычными объектами, с единственным отличием: <a href="http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.5.1">определение</a> некоторых свойств происходит особым образом:</p>

<ul>
<li><strong>Индексы массива</strong>: значение <code>length</code> увеличивается, если это необходимо.</li>
<li><code>length</code>: бросается исключение, если значение является недопустимым; удаляются элементы массива, если новое значение меньше текущего.</li>
</ul>


<p>Все остальные свойства ведут себя точно также, как у обычных объектов. Обратите внимание, что определение свойств происходит и при использовании оператора присваивания (вызывается внутренний метод <a href="http://www.ecma-international.org/ecma-262/5.1/#sec-8.12.5">[[Put]]</a>, который, в свою очередь, вызовет [[DefineOwnProperty]], если в цепочке прототипов не найдётся сеттера для этого свойства).</p>

<p>Вышесказанное означает, что невозможно создать &#8220;подкласс&#8221; &#8220;класса&#8221; Array, используя стандартный ECMAScript 5. Подробнее об этом можно прочитать в статье “<a href="http://www.2ality.com/2011/12/subtyping-builtins.html">Subtyping JavaScript built-ins</a>”.</p>

<h2>7. Выходя за пределы</h2>

<p>Что произойдёт, если попытаться обратиться к элементу с индексом, превосходящим максимально допустимое значение? Индекс будет интерпретирован как обычное имя свойства объекта. Если попытаться использовать такой индекс для добавления значения в массив, новый элемент массива не будет создан. Ниже иллюстрация использования слишком большого индекса:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">];</span>
</span><span class='line'><span class="nx">arr</span><span class="p">[</span><span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">32</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;c&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">arr</span>
</span><span class='line'><span class="c1">// [ &#39;a&#39;, &#39;b&#39; ]</span>
</span><span class='line'><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span>
</span><span class='line'><span class="c1">// 2</span>
</span><span class='line'><span class="nx">arr</span><span class="p">[</span><span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">32</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="c1">// &#39;c&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Если же попытаться добавить элемент в массив, уже имеющий максимальную длину, возникнет ошибка:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">32</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>  <span class="c1">// максимально возможная длина</span>
</span><span class='line'><span class="nx">arr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s1">&#39;x&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1">// RangeError: Invalid array length</span>
</span></code></pre></td></tr></table></div></figure>


<h2>8. Рекомендации</h2>

<p>Рекомендации при работе с массивами:</p>

<ul>
<li>Воспринимайте индексы массива как числа. Они обычно так и реализованы и, возможно, это станет стандартом в будущих версиях ECMAScript.</li>
<li>Старайтесь не использовать конструктор <code>Array()</code>.</li>
<li>Используйте литерал массива везде, где это возможно.</li>
<li>Не стоит использовать необычные схемы работы с массивами. Если следовать стандартным паттернам, JavaScript-движки смогут лучше оптимизировать выполнение кода. В статье Криса Уилсона (Chris Wilson) “<a href="http://www.html5rocks.com/en/tutorials/speed/v8/">Performance Tips for JavaScript in V8</a>” есть несколько интересных советов о работе с массивами.</li>
</ul>


<p>Если вам эта статья показалась полезной, возможно вас заинтересует и “<a href="http://www.2ality.com/2012/10/javascript-properties.html">Object properties in JavaScript</a>”.</p>

<h2>9. Связаные темы</h2>

<p><a id="ref1"></a>[1] <a href="http://www.2ality.com/2012/02/js-integers.html">Integers and shift operators in JavaScript</a><br/>
<a id="ref2"></a>[2] <a href="http://www.2ality.com/2012/06/dense-arrays.html">JavaScript: sparse arrays vs. dense arrays</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Терминология JavaScript: два прототипа]]></title>
    <link href="http://alexeykuzmin.com/blog/2013/02/04/javascript-terminology-the-two-prototypes/"/>
    <updated>2013-02-04T02:35:00+04:00</updated>
    <id>http://alexeykuzmin.com/blog/2013/02/04/javascript-terminology-the-two-prototypes</id>
    <content type="html"><![CDATA[<p><em>Перевод статьи <a href="http://rauschma.de/">Dr. Axel Rauschmayer</a>&#8216;а “<a href="http://www.2ality.com/2013/01/two-prototypes.html">JavaScript terminology: the two prototypes</a>”.</em></p>

<p>К сожалению, в JavaScript&#8217;е термин “прототип” (“prototype”) имеет несколько значений.</p>

<!-- more -->


<h2>Прототип 1: связь между объектами</h2>

<p>Во-первых, существуют прототипы объектов.<br/>
Согласно спецификации ECMAScript, некоторые свойства объектов являются <em>внутренними</em>. Внутренние свойства напрямую недоступны из JavaScript&#8217;а, их имена пишутся в двойных квадратных скобках. Одно их таких свойств, [[Prototype]], используется для реализации прототипного наследования. Каждый объект содержит в [[Prototype]] ссылку на свой прототип и т.о. наследует все его свойства. В ECMAScript 5 стало возможно получить ссылку на прототип объекта с помощью функции <code>Object.getPrototypeOf()</code>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">Object</span><span class="p">.</span><span class="nx">getPrototypeOf</span><span class="p">({})</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span>
</span><span class='line'><span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure>


<p>И возможно создать новый объект, явно указав его прототип, с помощью функции <code>Object.create()</code>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">proto</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">foo</span><span class="o">:</span> <span class="mi">123</span> <span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">proto</span><span class="p">);</span>
</span><span class='line'><span class="nx">obj</span><span class="p">.</span><span class="nx">foo</span>
</span><span class='line'><span class="c1">// 123</span>
</span></code></pre></td></tr></table></div></figure>


<p>Подробнее про обе эти функции можно почитать по ссылке <a href="#ref1">[1]</a>. В ECMAScript 6 можно будет получить ссылку на прототип объекта, используя специальное свойство <code>__proto__</code> <a href="#ref2">[2]</a>.</p>

<h2>Прототип 2: свойство конструктора</h2>

<p>Во-вторых, каждый конструктор имеет свойство <code>prototype</code>.<br/>
Это свойство содержит ссылку на объект, который будет прототипом всех объектов, которые будут созданы с помощью этого конструктора.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Foo</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">f</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Foo</span><span class="p">();</span>
</span><span class='line'><span class="nb">Object</span><span class="p">.</span><span class="nx">getPrototypeOf</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span> <span class="o">===</span> <span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span>
</span><span class='line'><span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Разрешаем конфликт именований</h2>

<p>Обычно из контекста понятно, какой из прототипов имеется ввиду. Если всё-таки возникает неопределённость, то под “prototype” приходится понимать прототип объекта, потому что именно в этом смысле этот термин используется в стандартной библиотеке в названии функции <code>getPrototypeOf</code>. Получается, нужно искать другое название для объекта, на который ссылается свойство <code>prototype</code> конструкторов. Можно было бы использовать термин “прототип конструктора” (“constructor prototype”), но это не избавит нас от неоднозначности, потому что у конструкторов тоже есть свой прототип:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Foo</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'><span class="nb">Object</span><span class="p">.</span><span class="nx">getPrototypeOf</span><span class="p">(</span><span class="nx">Foo</span><span class="p">)</span> <span class="o">===</span> <span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span>
</span><span class='line'><span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure>


<p>В итоге, наилучшим вариантом выглядит “прототип экземпляра” (“instance prototype”).</p>

<h2>Ссылки</h2>

<p><a id="ref1"></a>[1] <a href="http://www.2ality.com/2012/01/js-inheritance-by-example.html">JavaScript inheritance by example</a><br/>
<a id="ref2"></a>[2] <a href="http://www.2ality.com/2012/10/proto.html">JavaScript: __proto__</a></p>
]]></content>
  </entry>
  
</feed>
